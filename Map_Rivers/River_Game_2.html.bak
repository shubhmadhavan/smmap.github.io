<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial=">
    <title>Map with River Paths</title>
    <link rel="stylesheet" href="leaflet.css" />
    <style>
        #map {
            height: 94.5vh; /* Adjusted height for map */
			background: white;
        }
        #header {
            font-size: 24px;
            margin: 5px;
            text-align: center;
        }
        #result {
            position: absolute;
            z-index: 9999;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            border-radius: 5px;
            display: none;
            text-align: center;
        }

		
        #map:hover {
            cursor: default;        
        }

        .leaflet-interactive {
            cursor: crosshair;   
            stroke: #505050;            
        }
		
        .leaflet-interactive:hover {
            cursor: crosshair;   
            stroke: blue;            
        }
    </style>
</head>
<body>

<div id="header"> ã…¤</div>

<div id="map"></div>
<div id="result"></div>
<div id="result2"></div>

<script src="leaflet.js"></script>
<script src="river_data.js"></script>

<script>
// Initialize the map
var map = L.map('map').setView([20.5937, 80.9629], 5); // Set to India center

// Define the bounds of the image (set these to match the geographical area of the image)
var imageBounds = [[-2.0, 36.78], 
				  [41.33, 121.216]];  // Latitude/Longitude for the image corners

// Add the local image as an overlay to the map
L.imageOverlay('India_OS.png', imageBounds).addTo(map);

// Function to convert LINESTRING to an array of LatLngs
function parseLineString(lineString) {
    const coordinates = lineString.replace("LINESTRING", "").trim().slice(1, -1).split(", ");
    return coordinates.map(coord => {
        const [lon, lat] = coord.split(" ");
        return [parseFloat(lat), parseFloat(lon)];
    });
}

// Loop through river data and add them to the map
for (const river in riversData) {
    const pathData = parseLineString(riversData[river]);
    
    // Create a polyline for each river
    const path = L.polyline(pathData, {

        weight: 2,      // Thickness of the path
        opacity: 1     // Transparency
    }).addTo(map);

    // Add click event to each path
    path.on('click', function (e) {
        const resultBox = document.getElementById('result');

		
        resultBox.textContent = river;  // Display the value of the 'river' variable
        
        // Set the position of the result box near the cursor
        const offsetX = 7; // Adjust the X position slightly to avoid overlapping the cursor
        const offsetY = 7; // Adjust the Y position slightly to avoid overlapping the cursor
        resultBox.style.left = `${e.originalEvent.clientX + offsetX}px`;
        resultBox.style.top = `${e.originalEvent.clientY + offsetY}px`;

        // Show the result box
        resultBox.style.display = 'block';

        // Optionally, hide the result box after a few seconds (e.g., 5 seconds)
        setTimeout(() => {
            resultBox.style.display = 'none'; // Hide result box after 5 seconds
        }, 600);
    });
}
</script>

</body>
</html>
